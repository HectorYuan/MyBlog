<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>教程 on 遍历分形</title>
    <link>https://hectorblog.netlify.app/tutorial/</link>
    <description>Recent content in 教程 on 遍历分形</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Mon, 18 Dec 2023 17:03:00 +0800</lastBuildDate>
    <atom:link href="https://hectorblog.netlify.app/tutorial/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>语言配置</title>
      <link>https://hectorblog.netlify.app/tutorial/language/</link>
      <pubDate>Mon, 18 Dec 2023 17:03:00 +0800</pubDate>
      <guid>https://hectorblog.netlify.app/tutorial/language/</guid>
      <description>要将上述语言配置为中文，您只需要将相应的变量值更改为中文。下面是将这些变量配置为中文的代码：&#xA;baseURL = &amp;#39;https://example.org/&amp;#39; languageCode = &amp;#39;zh-cn&amp;#39; title = &amp;#39;我的新Hugo网站&amp;#39; theme = &amp;#39;ananke&amp;#39; 现在，baseURL 仍然保持不变，languageCode 设置为 &#39;zh-cn&#39;，title 设置为 &#39;我的新Hugo网站&#39;，theme 保持不变为 &#39;ananke&#39;。&#xA;请注意，zh-cn 是中文简体的语言代码。如果您想使用其他中文方言或语言，请将 languageCode 更改为相应的值。</description>
    </item>
    <item>
      <title>使用场景</title>
      <link>https://hectorblog.netlify.app/tutorial/usecase/</link>
      <pubDate>Mon, 18 Dec 2023 16:47:15 +0800</pubDate>
      <guid>https://hectorblog.netlify.app/tutorial/usecase/</guid>
      <description>下面是以表格形式整理的Hugo中的30个重要概念、使用场景和具体案例： 概念 使用场景 具体案例 安装 Hugo 在本地计算机上安装Hugo，以便开始建站。 访</description>
    </item>
    <item>
      <title>关键概念</title>
      <link>https://hectorblog.netlify.app/tutorial/concepts/</link>
      <pubDate>Mon, 18 Dec 2023 16:45:38 +0800</pubDate>
      <guid>https://hectorblog.netlify.app/tutorial/concepts/</guid>
      <description>在 Hugo 中，有许多重要的概念和用法，以下是30个关键点以及它们的使用场景和具体案例：&#xA;安装 Hugo：下载并安装 Hugo，为创建站点做准备。 创建新站点：使用 hugo new site &amp;lt;SITENAME&amp;gt; 创建新的项目目录。 配置文件：config.toml 文件用于定义全局设置和元数据。 内容管理：内容以 Markdown 文件形式存在于 content 目录下。 内容类型：如博客文章、页面，通过在 content 下建立不同子目录管理。 Front Matter：每个内容文件顶部的元数据，定义如日期、标题等信息。 主题：通过主题来定义站点的外观和布局。 Shortcodes：在 Markdown 中插入预定义的 HTML 代码块。 Taxonomies：分类和标签，用于组织内容。 数据文件：存放在 data 目录的 TOML、YAML 或 JSON 文件，用于非内容数据。 静态文件：存放在 static 目录，如图片、CSS、JS 文件。 模板：Hugo 使用 Go 模板语言来渲染页面。 部分模板：复用的 HTML 块，如头部和脚部。 列表页面：显示内容列表，如博客文章列表。 单页：显示单个内容项，如单篇文章。 Archetypes：内容文件的模板，用于快速创建具有相同结构的新内容。 Menus：站点导航菜单的配置。 自定义输出格式：除了 HTML 外，还可以输出 JSON 或其他格式。 多语言支持：可以创建多语言站点。 Hugo Pipes：资源管道，用于处理 CSS 和 JS 文件。 模块：引入其他 Hugo 项目作为模块依赖。 页面捆绑：将相关资源与页面捆绑在一起。 图片处理：调整图片大小、添加滤镜等。 自定义变量：在配置文件或 Front Matter 中定义变量供模板使用。 网站构建：使用 hugo 命令构建静态文件。 本地服务器：使用 hugo server 在本地预览网站。 部署网站：将构建的静态文件部署到服务器或托管平台。 性能优化：使用缓存、压缩等技术优化网站性能。 SEO优化：通过合理的 Front Matter 和模板设计提升搜索引擎优化。 错误调试：排查错误，如缺失文件、配置错误等。 使用场景和具体案例：</description>
    </item>
  </channel>
</rss>
